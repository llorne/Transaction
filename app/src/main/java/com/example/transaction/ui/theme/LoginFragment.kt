package com.example.transaction.ui

import LoginApi
import LoginRequest
import RefreshRequest
import android.content.Context
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import com.example.transaction.R
import com.example.transaction.databinding.FragmentLoginBinding
import com.example.transaction.retrofit.*
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.time.Instant

class LoginFragment : Fragment(R.layout.fragment_login) {

    private var _binding: FragmentLoginBinding? = null
    private val binding get() = _binding!!


    private lateinit var loginApi: LoginApi

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        _binding = FragmentLoginBinding.bind(view)


        val logging = HttpLoggingInterceptor().apply {
            level = HttpLoggingInterceptor.Level.BODY
        }

        val client = OkHttpClient.Builder()
            .addInterceptor(logging)
            .build()

        val retrofit = Retrofit.Builder()
            .baseUrl("http://10.0.2.2:8080/")
            .client(client)
            .addConverterFactory(GsonConverterFactory.create())
            .build()

        loginApi = retrofit.create(LoginApi::class.java)

        // 1) –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã
        viewLifecycleOwner.lifecycleScope.launch {
            val ctx = requireContext() // —ç—Ç–æ main-thread safe
            val ok = withContext(Dispatchers.IO) { checkTokens(ctx) }
            if (ok) {
                // accessToken –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏–±–æ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω
                Toast.makeText(ctx, "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ (—Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω)", Toast.LENGTH_SHORT).show()
                Log.i("AuthCheck", "Token valid ‚Äî –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                return@launch
            } else {
                Log.i("AuthCheck", "–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞")
            }
        }

        //  2) –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ Login(–í–æ–π—Ç–∏)
        binding.loginButton.setOnClickListener {
            viewLifecycleOwner.lifecycleScope.launch {
                val ctx = requireContext()
                val username = binding.username.text.toString().trim()
                val password = binding.password.text.toString()

                if (username.isEmpty() || password.isEmpty()) {
                    Toast.makeText(ctx, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å", Toast.LENGTH_SHORT).show()
                    return@launch
                }

                withContext(Dispatchers.IO) {
                    try {
                        val responseToken = loginApi.authLogin(
                            LoginRequest(username = username, password = password)
                        )

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º JWT-–æ–±—ë—Ä—Ç–∫—É (—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –µ—ë –∏–∑ responseToken)
                        val jwtWrapper = JwtWrapper(
                            jwtToken = JwtWrapper.JwtToken(
                                accessToken = responseToken.accessToken,
                                refreshToken = responseToken.refreshToken
                            )
                        )
                        saveJwt(ctx, jwtWrapper)

                        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ, —á—Ç–æ –ø—Ä–∏—à–ª–æ (–∫–æ—Ä–æ—Ç–∫–æ)
                        Log.i("LoginResponse", "accessToken = ${responseToken.accessToken.accessToken}")
                        Log.i("LoginResponse", "accessExpires = ${responseToken.accessToken.expiresAt}")
                        Log.i("LoginResponse", "refreshToken = ${responseToken.refreshToken.refreshToken}")
                        Log.i("LoginResponse", "refreshExpires = ${responseToken.refreshToken.expiresAt}")

                        withContext(Dispatchers.Main) {
                            Toast.makeText(ctx, "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ üéâ", Toast.LENGTH_SHORT).show()
                            // –ü–æ–∫–∞ –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ HomeFragment ‚Äî –ê–≥–∞–º–æ–≥–ª–∞–Ω–æ–≤ –§–∞—Ä—Ö–∞–¥ –∑–∞–π–º—ë—Ç—Å—è —ç—Ç–∏–º
                        }
                    } catch (e: retrofit2.HttpException) {
                        withContext(Dispatchers.Main) {
                            when (e.code()) {
                                401 -> Toast.makeText(ctx, "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", Toast.LENGTH_LONG).show()
                                409 -> Toast.makeText(ctx, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", Toast.LENGTH_LONG).show()
                                else -> Toast.makeText(ctx, "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${e.code()}", Toast.LENGTH_LONG).show()
                            }
                        }
                        Log.e("LoginError", "HttpException", e)
                    } catch (e: Exception) {
                        withContext(Dispatchers.Main) {
                            Toast.makeText(ctx, "–û—à–∏–±–∫–∞: ${e.localizedMessage}", Toast.LENGTH_LONG).show()
                        }
                        Log.e("LoginError", "Exception", e)
                    }
                }
            }
        }

        // 3) –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ---
        binding.toRegisterText.setOnClickListener {
            findNavController().navigate(R.id.action_loginFragment_to_registerFragment)
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω—ã:
     * - –µ—Å–ª–∏ accessToken –µ—â—ë –∂–∏–≤ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true
     * - –µ—Å–ª–∏ accessToken –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –∏ refreshToken –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚Äî –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true (–µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ)
     * - –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false
     *
     * –í–∞–∂–Ω–æ: –ø–æ–ª–µ expiresAt –≤ accessToken/refreshToken –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å String –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO-8601,
     * —á—Ç–æ–±—ã Instant.parse(...) —Ä–∞–±–æ—Ç–∞–ª.
     */
    private suspend fun checkTokens(context: Context): Boolean {
        val stored = loadJwt(context) ?: return false

        return try {
            val accessExpires = Instant.parse(stored.jwtToken.accessToken.expiresAt)
            val now = Instant.now()

            if (now.isBefore(accessExpires)) {
                Log.i("AuthCheck", "accessToken –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (until $accessExpires)")
                true
            } else {
                Log.i("AuthCheck", "accessToken –ø—Ä–æ—Å—Ä–æ—á–µ–Ω ‚Äî –ø—Ä–æ–±—É–µ–º refresh")
                try {
                    val refreshValue = stored.jwtToken.refreshToken.refreshToken
                    val newToken = loginApi.refresh(RefreshRequest(refreshToken = refreshValue))

                    val newWrapper = JwtWrapper(
                        jwtToken = JwtWrapper.JwtToken(
                            accessToken = newToken.accessToken,
                            refreshToken = newToken.refreshToken
                        )
                    )
                    saveJwt(context, newWrapper)
                    Log.i("AuthCheck", "refresh —É—Å–ø–µ—à–µ–Ω ‚Äî –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                    true
                } catch (e: Exception) {
                    Log.w("AuthCheck", "refresh failed", e)
                    false
                }
            }
        } catch (e: Exception) {
            Log.e("AuthCheck", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ expiresAt –∏–ª–∏ –¥—Ä—É–≥–æ–º", e)
            false
        }
    }
}
